cbuffer __CB1 : register(b0) {
	uint2 __inputSize;
	uint2 __outputSize;
	float2 __inputPt;
	float2 __outputPt;
	float2 __scale;
};


Texture2D<MF4> T0 : register(t0);
Texture2D<MF4> T1 : register(t1);
Texture2D<MF4> T2 : register(t2);
RWTexture2D<unorm MF4> T3 : register(u0);
RWTexture2D<unorm MF4> T4 : register(u1);
RWTexture2D<unorm MF4> T5 : register(u2);
SamplerState SP : register(s0);
SamplerState SL : register(s1);

uint __Bfe(uint src, uint off, uint bits) { uint mask = (1u << bits) - 1; return (src >> off) & mask; }
uint __BfiM(uint src, uint ins, uint bits) { uint mask = (1u << bits) - 1; return (ins & mask) | (src & (~mask)); }
uint2 Rmp8x8(uint a) { return uint2(__Bfe(a, 1u, 3u), __BfiM(__Bfe(a, 3u, 3u), a, 1u)); }
uint2 GetInputSize() { return __inputSize; }
float2 GetInputPt() { return __inputPt; }
uint2 GetOutputSize() { return __outputSize; }
float2 GetOutputPt() { return __outputPt; }
float2 GetScale() { return __scale; }
MF2 MulAdd(MF2 x, MF2x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	return result;
}
MF3 MulAdd(MF2 x, MF2x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	return result;
}
MF4 MulAdd(MF2 x, MF2x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	return result;
}
MF2 MulAdd(MF3 x, MF3x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	return result;
}
MF3 MulAdd(MF3 x, MF3x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	return result;
}
MF4 MulAdd(MF3 x, MF3x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	return result;
}
MF2 MulAdd(MF4 x, MF4x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	result = mad(x.w, y._m30_m31, result);
	return result;
}
MF3 MulAdd(MF4 x, MF4x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	result = mad(x.w, y._m30_m31_m32, result);
	return result;
}
MF4 MulAdd(MF4 x, MF4x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	result = mad(x.w, y._m30_m31_m32_m33, result);
	return result;
}

#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 MF4
#define M4 MF4x4

#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))
#define L2(x, y) V4(O(T2, x, y))

void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0, r2 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 = MulAdd(s0_0_0, M4(-1.195e-01, -2.782e-03, -1.647e-02, 8.935e-02, 1.342e-01, -4.409e-02, -2.694e-02, -1.557e-01, -4.474e-01, 5.639e-02, 1.080e-01, -1.304e-01, -2.758e-01, 7.983e-02, -1.059e-02, -6.616e-02), r0);
	r1 = MulAdd(s0_0_0, M4(1.783e-01, 9.807e-02, -2.627e-02, -2.885e-02, 2.384e-01, -2.243e-01, -7.838e-03, 6.787e-02, -2.319e-01, 2.666e-01, 1.008e-01, -1.147e-01, 9.865e-02, 1.294e-01, 4.350e-02, 1.246e-01), r1);
	r2 = MulAdd(s0_0_0, M4(-1.619e-02, -3.094e-02, -4.934e-02, -1.328e-02, -4.038e-02, 2.685e-02, -2.006e-01, -1.888e-02, -3.766e-02, 3.719e-02, 8.466e-02, 6.166e-03, -9.328e-02, -2.239e-01, -7.447e-02, 1.739e-02), r2);
	r0 = MulAdd(s0_0_1, M4(-5.621e-01, -1.996e-02, 8.765e-02, -3.496e-02, 4.525e-01, -7.246e-02, -2.052e-01, -1.602e-01, -2.078e-01, 6.393e-02, 2.912e-02, 7.006e-02, 4.341e-01, 1.246e-01, 2.096e-02, 6.617e-02), r0);
	r1 = MulAdd(s0_0_1, M4(2.314e-02, -3.825e-02, 2.103e-02, 4.088e-02, 3.772e-01, -2.136e-01, -9.008e-02, -1.062e-01, -9.125e-03, 7.250e-02, 2.888e-02, -1.003e-01, 1.971e-02, -3.385e-01, -5.944e-04, 2.791e-01), r1);
	r2 = MulAdd(s0_0_1, M4(8.260e-03, -1.815e-01, 1.043e-01, -6.471e-03, -2.324e-01, 3.654e-02, -3.034e-01, -4.956e-02, 6.765e-02, 9.634e-02, 6.750e-02, 2.752e-02, 2.886e-02, -1.977e-01, 6.311e-01, 2.736e-02), r2);
	r0 = MulAdd(s0_0_2, M4(-1.072e-01, -7.057e-02, 1.890e-02, 1.577e-01, 2.271e-01, 1.453e-01, -8.716e-02, -2.320e-01, -1.048e-01, 1.195e-02, -6.811e-03, 2.474e-02, -3.527e-02, -1.130e-01, -1.529e-02, -8.423e-02), r0);
	r1 = MulAdd(s0_0_2, M4(-8.031e-02, -9.505e-02, -4.529e-02, 9.090e-02, 1.433e-01, -1.259e-01, 7.499e-02, 7.982e-02, 3.114e-03, 4.358e-02, -4.961e-02, -1.052e-01, -3.700e-02, -1.449e-01, -1.125e-01, 1.505e-01), r1);
	r2 = MulAdd(s0_0_2, M4(-3.306e-02, -4.710e-03, 1.636e-01, 4.672e-02, 1.131e-01, 2.906e-02, -6.813e-02, -7.225e-03, -2.967e-02, -1.007e-01, 2.268e-02, -1.861e-02, -6.798e-02, 5.887e-02, 2.688e-02, -1.170e-05), r2);
	r0 = MulAdd(s0_1_0, M4(6.728e-02, 3.510e-02, 2.658e-02, 2.512e-01, -3.088e-01, -1.993e-01, 2.953e-01, -2.033e-01, 2.062e-01, 1.665e-02, 1.870e-01, -2.065e-01, -3.763e-01, -2.050e-01, -1.891e-02, -5.449e-01), r0);
	r1 = MulAdd(s0_1_0, M4(3.610e-01, 5.925e-01, 2.751e-02, -2.362e-02, 6.179e-01, -2.047e-01, -7.985e-02, -3.896e-01, 2.502e-02, 5.250e-01, -7.937e-03, -3.707e-01, -4.750e-01, -1.274e-01, 1.043e-01, 6.493e-01), r1);
	r2 = MulAdd(s0_1_0, M4(-8.045e-02, -4.278e-01, -3.148e-01, 1.371e-02, 4.091e-02, 7.419e-02, -1.184e-01, -8.461e-02, 8.302e-03, 3.290e-02, -1.579e-01, 1.514e-01, -3.994e-02, 1.810e-01, -2.520e-01, 7.419e-02), r2);
	r0 = MulAdd(s0_1_1, M4(3.134e-01, 3.896e-01, 7.740e-01, 7.747e-01, 3.455e-02, 1.452e-01, 2.454e-02, 5.856e-02, -8.463e-02, 2.719e-02, 3.138e-02, 1.391e-01, 1.401e-01, 2.224e-02, 5.334e-02, -1.340e-01), r0);
	r1 = MulAdd(s0_1_1, M4(2.838e-01, 5.138e-01, 3.291e-01, 3.940e-01, 1.003e-01, 1.362e-01, 1.313e-01, 9.639e-02, 2.783e-01, -5.034e-01, -6.909e-02, -3.842e-01, 1.153e-01, 2.969e-01, -4.680e-02, 8.920e-01), r1);
	r2 = MulAdd(s0_1_1, M4(3.780e-01, -4.150e-01, 5.874e-01, 4.346e-01, -5.301e-03, -6.339e-01, 1.921e-01, -1.519e-01, -5.744e-02, 2.906e-02, 4.541e-01, -1.083e-01, 3.193e-01, -1.175e-01, -1.372e-01, 3.318e-01), r2);
	r0 = MulAdd(s0_1_2, M4(1.232e-01, -3.721e-01, 9.193e-02, 1.525e-01, 5.252e-01, 2.155e-01, 1.284e-01, -2.804e-01, -1.023e-01, -2.272e-01, -2.110e-02, -6.227e-03, -1.946e-02, -9.592e-02, -5.048e-02, -2.675e-02), r0);
	r1 = MulAdd(s0_1_2, M4(1.930e-01, -8.656e-01, -2.994e-01, -2.104e-01, 1.890e-01, 4.542e-01, 2.574e-02, -1.720e-01, -1.645e-01, -3.407e-01, -5.756e-02, -1.956e-01, 1.388e-01, -1.445e-01, -6.649e-02, 2.406e-01), r1);
	r2 = MulAdd(s0_1_2, M4(-1.713e-01, -1.264e-01, 2.701e-01, 2.557e-02, 1.577e-01, 1.241e-01, 1.909e-01, 1.067e-01, -2.781e-02, 1.250e-01, 8.625e-02, -3.212e-02, -4.053e-02, -2.230e-02, 2.453e-02, -7.918e-03), r2);
	r0 = MulAdd(s0_2_0, M4(4.534e-02, -4.142e-02, 8.179e-02, -2.684e-01, -4.161e-02, -8.607e-02, -5.479e-02, 1.754e-01, -8.713e-02, -1.797e-02, 4.359e-02, -1.742e-01, -2.398e-02, 5.235e-02, 5.225e-02, 1.756e-01), r0);
	r1 = MulAdd(s0_2_0, M4(-1.164e-01, 2.328e-01, 2.310e-01, 1.101e-01, 2.458e-02, -8.798e-01, -2.802e-01, 5.107e-02, -1.197e+00, 2.584e-01, 3.634e-02, -4.719e-01, 6.120e-01, 2.479e-02, 1.159e-01, 4.846e-01), r1);
	r2 = MulAdd(s0_2_0, M4(5.291e-02, 1.612e-01, -2.273e-01, 1.439e-01, 4.775e-01, 1.082e-02, -3.568e-02, 1.408e-01, 1.625e-01, -1.131e-01, -7.561e-02, 1.519e-01, -6.958e-03, -2.370e-01, 1.773e-02, -1.732e-02), r2);
	r0 = MulAdd(s0_2_1, M4(4.541e-01, 2.469e-01, -1.168e-02, -3.170e-01, -1.101e+00, -7.643e-01, -2.874e-01, 2.968e-02, 1.191e-02, 1.177e-01, 1.100e-03, -8.066e-01, 6.307e-02, 1.023e-01, 2.403e-02, 2.938e-01), r0);
	r1 = MulAdd(s0_2_1, M4(4.083e-01, 2.414e-01, 1.567e-02, 5.885e-01, -1.929e+00, 2.075e-01, 4.123e-02, 2.607e-01, 2.411e-01, 3.928e-02, -8.402e-02, -4.086e-01, 1.313e-01, -6.640e-03, 1.242e-01, 4.443e-01), r1);
	r2 = MulAdd(s0_2_1, M4(1.621e+00, 2.404e-01, -3.576e-01, 1.405e+00, -8.027e-01, 7.398e-01, 6.259e-01, -3.249e-01, 3.969e-01, -9.999e-02, 2.323e-01, 2.189e-01, 1.142e-01, -1.526e-01, 1.631e-01, 7.761e-02), r2);
	r0 = MulAdd(s0_2_2, M4(-1.086e-02, -6.350e-02, 9.068e-03, -2.549e-01, -2.245e-01, 7.344e-01, 3.321e-02, 3.097e-01, 2.939e-02, -2.476e-01, 1.290e-02, 5.514e-02, 2.033e-02, 1.535e-02, 3.096e-02, -1.111e-01), r0);
	r1 = MulAdd(s0_2_2, M4(5.527e-01, -4.384e-01, -9.156e-02, 3.779e-01, -8.049e-02, 1.777e-01, 1.279e-01, 5.167e-01, 8.615e-02, 3.818e-02, -8.714e-02, -4.111e-01, -9.676e-03, 1.170e-01, -5.134e-02, 4.131e-01), r1);
	r2 = MulAdd(s0_2_2, M4(9.804e-02, 3.701e-01, 7.796e-02, 1.041e-01, 3.967e-01, -3.729e-02, -3.651e-01, 2.187e-01, -1.155e-01, 2.961e-02, 4.329e-02, -9.155e-02, -6.378e-02, -1.005e-01, -8.361e-04, -2.016e-02), r2);
	r0 = MulAdd(s1_0_0, M4(-8.091e-02, 5.964e-03, 1.131e-02, -1.045e-01, 4.463e-01, -3.057e-02, -3.990e-02, -1.284e-01, 7.705e-02, -1.342e-01, -1.647e-01, -1.505e-01, -1.435e-02, -4.786e-02, -1.364e-02, 7.105e-02), r0);
	r1 = MulAdd(s1_0_0, M4(5.244e-01, 1.761e-01, 9.298e-02, -2.485e-02, -4.892e-01, -4.094e-01, -1.527e-01, 5.510e-02, -2.399e-01, -5.568e-01, -2.523e-01, 4.273e-02, -2.009e-02, -1.415e-01, 9.470e-03, -2.935e-02), r1);
	r2 = MulAdd(s1_0_0, M4(-1.994e-02, 4.133e-02, -7.480e-02, 1.158e-02, 5.948e-02, 1.075e-01, 4.158e-02, -7.777e-03, 7.635e-02, 1.919e-01, 2.498e-01, -6.321e-02, 3.255e-03, 5.260e-02, -1.264e-02, 1.136e-02), r2);
	r0 = MulAdd(s1_0_1, M4(-1.161e+00, -1.801e-03, 2.903e-01, 8.344e-02, 9.512e-02, 4.877e-02, 2.932e-02, -3.623e-01, -3.902e-01, -2.259e-02, 2.860e-04, -3.074e-01, -3.301e-03, -5.011e-02, -1.529e-01, 1.839e-01), r0);
	r1 = MulAdd(s1_0_1, M4(4.421e-01, 1.424e-02, 2.052e-01, 1.260e-01, -4.766e-01, 2.058e-01, -1.150e-01, 1.372e-01, -6.994e-02, 4.053e-01, 1.377e-01, -5.016e-02, 3.171e-01, -1.886e-02, 2.080e-02, -1.534e-01), r1);
	r2 = MulAdd(s1_0_1, M4(7.398e-02, -1.675e-01, 2.317e-02, 4.728e-03, 1.186e-01, 4.680e-01, 8.349e-02, 9.532e-02, -5.383e-02, 6.255e-02, -5.918e-01, -5.407e-02, -7.339e-02, 1.084e-01, -4.561e-01, -7.709e-02), r2);
	r0 = MulAdd(s1_0_2, M4(-5.955e-01, -8.572e-02, 5.788e-02, -2.494e-02, -2.346e-02, 5.889e-02, 1.739e-02, 1.601e-01, -1.611e-02, 7.011e-02, 1.486e-02, 3.629e-03, 2.366e-02, 1.401e-01, 1.545e-02, -6.272e-02), r0);
	r1 = MulAdd(s1_0_2, M4(-3.560e-01, -1.456e-01, -2.211e-01, -1.439e-01, 3.024e-01, 2.056e-01, 1.674e-01, 4.816e-02, 8.819e-02, 2.785e-01, 1.116e-01, 4.942e-02, 7.848e-02, 2.130e-01, 6.364e-02, -2.354e-01), r1);
	r2 = MulAdd(s1_0_2, M4(-6.028e-02, -2.269e-01, -2.095e-01, 8.257e-03, -3.370e-02, 1.719e-01, -1.185e-01, 2.671e-02, 1.316e-02, -6.564e-02, -5.600e-02, 2.305e-03, 2.600e-02, -2.821e-01, -1.426e-02, -7.375e-02), r2);
	r0 = MulAdd(s1_1_0, M4(-2.248e-02, 6.043e-02, 2.808e-02, 2.329e-01, 1.073e-01, -1.018e-01, -4.755e-02, -2.192e-02, 3.759e-02, -1.135e-01, -1.280e-01, 1.908e-01, 2.422e-02, -6.803e-02, 9.674e-04, 1.846e-01), r0);
	r1 = MulAdd(s1_1_0, M4(-2.803e-01, 4.876e-01, 2.270e-02, -3.722e-03, -1.658e-01, -3.292e-01, -6.100e-02, -1.270e-01, -1.044e+00, -3.930e-01, -2.939e-01, -2.094e-01, -2.124e-01, -2.370e-03, 1.091e-01, -1.311e-01), r1);
	r2 = MulAdd(s1_1_0, M4(-4.534e-03, -1.763e-01, -8.423e-02, 2.711e-02, -5.319e-03, 4.972e-01, 3.259e-02, -1.313e-01, -1.667e-01, 1.638e-01, 3.195e-01, -2.000e-01, -6.090e-02, 1.472e-01, -2.107e-02, -2.024e-02), r2);
	r0 = MulAdd(s1_1_1, M4(6.284e-01, 4.037e-01, 5.488e-01, 4.483e-01, 2.585e-01, 4.176e-02, 4.315e-02, 7.433e-01, -2.203e-01, -7.788e-02, 1.316e-03, 1.170e-01, -5.041e-01, -5.083e-01, -1.636e-01, 2.094e-01), r0);
	r1 = MulAdd(s1_1_1, M4(3.974e-01, 7.238e-01, 5.801e-01, 2.100e-01, -5.379e-01, -3.604e-02, -4.114e-01, -2.587e-01, -6.799e-01, 4.307e-01, 1.028e-01, -4.541e-01, -2.498e-01, -1.995e-01, -5.944e-03, -5.798e-01), r1);
	r2 = MulAdd(s1_1_1, M4(8.748e-01, -2.503e-01, -1.163e-01, 6.193e-01, -7.160e-02, -2.926e-01, 2.823e-01, -5.832e-02, -4.691e-01, -3.428e-01, -3.361e-01, -3.252e-01, -5.215e-01, -4.780e-01, -3.895e-01, -5.131e-01), r2);
	r0 = MulAdd(s1_1_2, M4(2.491e-01, -3.704e+01, 1.015e-01, -1.715e+00, 7.478e-04, 2.296e-01, 3.992e-02, 3.427e-01, -7.711e-03, 1.593e-02, 2.253e-02, -1.188e-01, 6.016e-02, 6.191e-01, 3.195e-03, 5.925e-02), r0);
	r1 = MulAdd(s1_1_2, M4(3.271e-01, -1.288e+00, -3.803e-01, -8.543e-02, -5.573e-01, 4.268e-01, 4.147e-01, 1.555e-01, -4.686e-02, 1.956e-01, 1.947e-02, 8.344e-02, -1.150e-01, -2.216e-02, 4.597e-02, -5.005e-02), r1);
	r2 = MulAdd(s1_1_2, M4(-5.889e-02, 7.753e-02, 9.189e-02, -7.154e-02, 4.701e-02, -3.662e-01, -2.010e-01, 3.158e-02, 6.865e-03, 5.643e-02, -6.771e-02, 3.890e-02, 3.126e-01, 1.334e-01, 1.128e-01, 1.313e-01), r2);
	r0 = MulAdd(s1_2_0, M4(-2.087e-02, 1.292e-02, 1.714e-02, -1.420e-01, 3.486e-01, -6.191e-02, -5.583e-02, -9.830e-02, 1.524e-02, -2.447e-02, -4.297e-02, -3.177e-01, 5.009e-02, 3.690e-02, 1.104e-02, 1.465e-02), r0);
	r1 = MulAdd(s1_2_0, M4(-3.224e-01, 1.184e-01, 9.703e-02, 7.334e-02, 1.129e+00, -1.284e-01, -8.011e-02, 2.494e-01, -6.895e-01, -1.548e-01, -7.984e-02, -1.451e-01, -7.972e-02, 5.407e-02, 4.626e-02, -4.652e-01), r1);
	r2 = MulAdd(s1_2_0, M4(1.332e-02, 7.325e-02, -6.152e-02, 3.228e-02, -1.453e-01, -1.606e-01, 4.684e-03, -5.536e-02, -2.218e-02, 6.068e-02, 4.577e-02, -4.796e-02, -1.470e-01, -6.950e-02, -7.434e-02, -1.102e-01), r2);
	r0 = MulAdd(s1_2_1, M4(-5.598e-02, 1.295e-01, 1.021e-03, -3.887e-01, -3.907e-01, 2.177e-01, 1.152e-02, 1.330e-01, 2.220e-02, 1.094e-02, 1.356e-02, -1.842e-01, -2.615e-02, -4.044e-02, 5.777e-03, -3.430e-01), r0);
	r1 = MulAdd(s1_2_1, M4(-1.770e+00, 6.587e-02, 4.620e-02, -4.802e-02, -1.365e-01, 4.538e-01, 1.483e-01, -3.157e-01, -1.712e-01, 4.919e-02, -2.451e-02, -1.657e-01, -5.841e-01, -2.260e-01, 3.821e-02, -6.152e-01), r1);
	r2 = MulAdd(s1_2_1, M4(2.949e-01, 1.007e-01, -2.504e-01, 2.965e-01, 1.692e-01, -4.431e-01, -3.032e-01, 8.727e-02, -7.648e-02, 5.728e-02, -1.088e-01, -5.211e-02, -2.787e-01, 2.133e-01, 3.779e-01, -1.804e-01), r2);
	r0 = MulAdd(s1_2_2, M4(-8.538e-02, -9.626e-02, -3.871e-02, -3.720e-01, -2.251e-01, -1.783e-01, -1.719e-02, -1.389e-01, -5.509e-02, 7.782e-03, -2.470e-02, -4.052e-02, 3.227e-01, -1.139e-01, -1.620e-02, 1.942e-01), r0);
	r1 = MulAdd(s1_2_2, M4(-6.348e-01, -8.457e-02, -8.323e-02, -3.917e-03, 5.205e-02, -3.622e-02, 1.685e-01, -4.062e-01, -1.141e-01, 1.716e-02, 3.226e-02, -1.704e-01, 7.662e-02, -3.979e-01, -1.098e-01, -4.929e-01), r1);
	r2 = MulAdd(s1_2_2, M4(1.495e-03, -4.435e-02, -9.707e-02, 3.295e-02, -8.101e-02, 5.559e-02, 1.508e-01, 4.317e-03, 2.925e-02, 9.780e-03, 1.053e-02, 1.849e-02, 3.227e-02, 1.697e-01, 5.290e-02, 2.406e-02), r2);
	s0_0_0 = L2(-1.0, -1.0); s0_0_1 = L2(0.0, -1.0); s0_0_2 = L2(1.0, -1.0);
	s0_1_0 = L2(-1.0, 0.0); s0_1_1 = L2(0.0, 0.0); s0_1_2 = L2(1.0, 0.0);
	s0_2_0 = L2(-1.0, 1.0); s0_2_1 = L2(0.0, 1.0); s0_2_2 = L2(1.0, 1.0);
	r0 = MulAdd(s0_0_0, M4(-1.288e-01, -1.476e-01, -1.194e-01, 1.757e-01, -9.781e-02, 1.083e-01, 3.316e-02, -2.542e-01, 3.555e-01, 5.492e-02, -5.015e-02, 7.384e-02, 3.053e-01, 1.326e-01, -1.065e-01, 4.714e-02), r0);
	r1 = MulAdd(s0_0_0, M4(-2.339e-01, -2.341e-01, -1.656e-01, -2.802e-02, -2.977e-02, 3.076e-01, 9.083e-03, 1.685e-01, -1.178e+00, -4.871e-01, -2.761e-01, -1.368e-01, -5.744e-01, -1.064e-02, 1.435e-01, 3.032e-01), r1);
	r2 = MulAdd(s0_0_0, M4(-8.233e-02, 1.596e-01, 3.061e-01, -2.245e-02, -1.757e-01, -5.143e-02, 1.061e-01, 5.894e-02, 7.105e-02, -6.280e-02, 1.684e-01, -2.964e-02, 2.744e-02, -1.831e-01, 3.190e-02, -1.195e-02), r2);
	r0 = MulAdd(s0_0_1, M4(3.771e-01, -3.831e-01, 6.527e-02, 4.982e-01, -3.543e-01, -4.346e-01, 1.272e-01, -5.401e-02, -3.638e-01, 3.155e-01, -1.419e-02, 2.188e-01, 2.790e-01, -2.027e-01, 5.311e-02, -2.886e-01), r0);
	r1 = MulAdd(s0_0_1, M4(-4.946e-01, 1.635e-01, 1.824e-01, 1.272e-01, -1.880e-01, 3.846e-01, 1.452e-01, -9.590e-01, -1.433e+00, 3.369e-01, 3.227e-01, 1.594e-01, -5.894e-01, -3.781e-01, -2.127e-01, 2.710e-03), r1);
	r2 = MulAdd(s0_0_1, M4(-3.087e-02, 4.912e-01, -8.260e-01, -1.196e-01, -3.771e-01, -4.267e-01, -2.383e-01, -1.185e-01, 1.409e-01, 8.061e-01, -1.003e-01, -9.949e-03, -5.593e-02, 3.181e-01, -1.151e-01, -5.267e-02), r2);
	r0 = MulAdd(s0_0_2, M4(2.705e-01, 5.424e-01, -6.658e-02, 2.918e-01, -2.207e-01, 1.130e-01, -5.503e-02, -1.384e-01, 8.320e-01, 2.518e-01, -7.916e-03, 2.687e-02, -3.833e-01, -4.623e-02, 3.314e-03, -1.942e-01), r0);
	r1 = MulAdd(s0_0_2, M4(-4.029e-01, -2.731e-02, -3.362e-02, 3.361e-01, 3.759e-01, -4.710e-01, 1.406e-01, -2.484e-01, 6.383e-01, 2.517e-01, 1.400e-02, 5.596e-02, 2.565e-01, -1.129e-01, 8.728e-02, 4.135e-01), r1);
	r2 = MulAdd(s0_0_2, M4(2.970e-01, 5.334e-02, 2.566e-01, 1.008e-01, -6.914e-02, -8.490e-02, 4.448e-01, -4.482e-02, 1.091e-01, 4.105e-01, -1.081e-01, -2.144e-02, -1.531e-02, 7.835e-02, -3.865e-02, -1.018e-01), r2);
	r0 = MulAdd(s0_1_0, M4(-4.130e-01, -1.357e-01, 2.685e-02, -2.348e-01, -1.936e-02, 1.505e-02, -1.392e-01, -2.457e-02, -1.300e-02, -1.012e-01, -1.854e-01, -5.578e-01, -1.498e-01, -1.423e-01, -8.878e-03, -3.682e-01), r0);
	r1 = MulAdd(s0_1_0, M4(6.660e-01, 7.191e-02, 6.120e-01, -4.368e-01, 5.277e-01, 1.327e-01, -1.072e-01, -9.239e-02, 5.542e-01, -7.792e-01, -2.208e-01, -1.730e-01, 4.048e-01, -4.107e-01, -2.397e-01, 3.588e-01), r1);
	r2 = MulAdd(s0_1_0, M4(-4.015e-01, -5.224e-01, 4.182e-01, -4.482e-01, 1.562e-01, -4.360e-01, 1.370e-01, -3.616e-02, -4.618e-02, 1.868e-01, 8.858e-02, -8.757e-02, -1.432e-01, 1.780e-01, 2.062e-01, -1.036e-01), r2);
	r0 = MulAdd(s0_1_1, M4(7.276e-02, -1.208e-01, -5.913e-02, -5.598e-01, 2.440e-01, 2.302e-01, 1.070e-01, 2.536e-01, 7.349e-02, -3.152e-01, 2.640e-01, -2.006e-01, -5.437e-01, 1.998e-02, 2.490e-01, -1.816e-01), r0);
	r1 = MulAdd(s0_1_1, M4(7.291e-01, -7.681e-02, -1.505e-01, -7.358e-02, -2.790e-01, 3.648e-01, 1.184e-01, 1.451e+00, 2.265e-01, 3.704e-01, 2.199e-01, -7.690e-02, -2.274e+00, 6.125e-01, 2.507e-01, -2.036e-01), r1);
	r2 = MulAdd(s0_1_1, M4(-6.974e-01, -9.483e-01, -1.005e+00, -7.180e-01, 9.718e-01, 9.220e-01, 1.815e-01, 7.114e-01, -5.811e-01, -4.000e-01, 6.824e-02, -2.309e-01, 5.481e-02, 1.076e-01, -8.109e-02, 8.214e-02), r2);
	r0 = MulAdd(s0_1_2, M4(-3.908e-03, 3.818e-01, 7.491e-02, -2.036e-01, -4.699e-01, -2.655e-01, 5.943e-02, 8.274e-02, -9.263e-02, 5.145e-02, -6.481e-02, -8.418e-01, 2.354e-01, 3.803e-01, 8.590e-02, 6.857e-02), r0);
	r1 = MulAdd(s0_1_2, M4(2.391e-01, -8.973e-02, -3.659e-01, 3.401e-01, -3.881e-01, 5.709e-02, -5.577e-02, 4.037e-01, 7.414e-01, -1.485e-01, -1.317e-01, -1.475e-01, -7.282e-01, -1.551e-02, 1.411e-01, -4.009e-01), r1);
	r2 = MulAdd(s0_1_2, M4(-2.483e-01, -4.494e-01, 8.249e-01, -1.202e-01, -8.706e-02, -1.870e-01, -2.945e-01, -9.375e-02, -5.850e-02, 1.752e-01, -6.868e-02, 1.178e-01, -9.945e-02, 8.942e-02, 1.186e-01, -8.432e-02), r2);
	r0 = MulAdd(s0_2_0, M4(1.203e-02, -1.769e-01, 3.631e-02, 1.997e-01, 4.286e-02, -7.483e-02, -6.190e-02, -9.006e-02, -7.242e-02, 5.012e-03, -1.616e-02, 3.364e-01, 9.702e-02, 2.644e-02, 4.662e-02, 1.905e-01), r0);
	r1 = MulAdd(s0_2_0, M4(1.757e-01, -2.754e-02, -1.902e-01, 7.075e-02, -2.360e-01, -6.136e-02, -1.723e-01, -4.440e-01, 7.379e-01, -9.306e-02, -1.066e-01, 2.348e-01, 3.588e-01, 2.486e-01, 7.216e-03, 8.569e-02), r1);
	r2 = MulAdd(s0_2_0, M4(2.279e-01, 6.121e-01, 3.666e-01, 2.546e-01, 1.741e-02, 1.978e-01, 8.353e-02, -2.692e-03, 1.146e-02, -2.822e-01, 1.836e-04, -1.034e-02, 6.014e-03, 1.530e-01, 9.490e-02, 9.806e-02), r2);
	r0 = MulAdd(s0_2_1, M4(2.685e-01, -3.993e-02, 1.243e-01, 1.526e-01, -2.746e-02, 5.692e-03, -4.628e-02, -1.644e-01, -6.031e-02, 1.331e-01, 4.747e-02, 6.986e-01, -5.089e-02, -8.952e-02, -8.912e-03, 6.074e-01), r0);
	r1 = MulAdd(s0_2_1, M4(2.769e-02, 4.781e-02, -2.540e-02, 9.864e-02, -6.560e-01, -4.386e-02, -1.233e-01, -5.068e-01, -7.804e-01, 7.293e-02, 1.295e-01, 9.702e-02, 1.280e+00, 1.412e-01, 1.408e-02, -9.061e-02), r1);
	r2 = MulAdd(s0_2_1, M4(6.217e-01, 5.693e-01, -4.500e-01, 8.445e-01, -6.107e-02, -2.220e-01, -2.737e-01, -1.397e-01, 2.242e-01, -1.369e-01, -5.505e-02, 6.678e-02, 1.838e-01, -7.097e-02, 1.136e-01, 1.761e-01), r2);
	r0 = MulAdd(s0_2_2, M4(-2.326e-01, 1.049e-01, -6.058e-02, -2.120e-01, -5.192e-02, -5.077e-02, -7.789e-03, 3.571e-02, -1.458e-01, -8.850e-02, 7.475e-02, 4.803e-01, 1.460e-01, -2.452e-02, 1.272e-02, 7.251e-02), r0);
	r1 = MulAdd(s0_2_2, M4(-2.952e-01, 1.587e-01, 1.255e-01, -3.417e-01, -1.724e-01, -4.613e-02, 6.487e-02, -4.664e-01, 3.921e-01, -5.472e-02, 2.621e-02, 5.369e-01, 3.998e-01, -1.093e-01, -1.931e-02, 3.767e-02), r1);
	r2 = MulAdd(s0_2_2, M4(2.300e-01, -6.538e-03, 1.104e-01, 2.158e-01, -1.142e-01, -4.974e-02, -6.693e-02, -8.683e-02, -9.128e-02, -5.455e-01, -8.184e-02, -3.169e-02, -7.272e-02, 2.355e-02, -2.067e-01, -4.727e-02), r2);
	r0 = max(r0, 0.0);
	T3[gxy] = r0;
	r1 = max(r1, 0.0);
	T4[gxy] = r1;
	r2 = max(r2, 0.0);
	T5[gxy] = r2;
}

[numthreads(64, 1, 1)]
void __M(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) {
	Pass2((gid.xy << 3), tid);
}
