cbuffer __CB1 : register(b0) {
	uint2 __inputSize;
	uint2 __outputSize;
	float2 __inputPt;
	float2 __outputPt;
	float2 __scale;
};


Texture2D<MF4> T3 : register(t0);
Texture2D<MF4> T4 : register(t1);
Texture2D<MF4> T5 : register(t2);
RWTexture2D<unorm MF4> T0 : register(u0);
RWTexture2D<unorm MF4> T1 : register(u1);
SamplerState SP : register(s0);
SamplerState SL : register(s1);

uint __Bfe(uint src, uint off, uint bits) { uint mask = (1u << bits) - 1; return (src >> off) & mask; }
uint __BfiM(uint src, uint ins, uint bits) { uint mask = (1u << bits) - 1; return (ins & mask) | (src & (~mask)); }
uint2 Rmp8x8(uint a) { return uint2(__Bfe(a, 1u, 3u), __BfiM(__Bfe(a, 3u, 3u), a, 1u)); }
uint2 GetInputSize() { return __inputSize; }
float2 GetInputPt() { return __inputPt; }
uint2 GetOutputSize() { return __outputSize; }
float2 GetOutputPt() { return __outputPt; }
float2 GetScale() { return __scale; }
MF2 MulAdd(MF2 x, MF2x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	return result;
}
MF3 MulAdd(MF2 x, MF2x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	return result;
}
MF4 MulAdd(MF2 x, MF2x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	return result;
}
MF2 MulAdd(MF3 x, MF3x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	return result;
}
MF3 MulAdd(MF3 x, MF3x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	return result;
}
MF4 MulAdd(MF3 x, MF3x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	return result;
}
MF2 MulAdd(MF4 x, MF4x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	result = mad(x.w, y._m30_m31, result);
	return result;
}
MF3 MulAdd(MF4 x, MF4x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	result = mad(x.w, y._m30_m31_m32, result);
	return result;
}
MF4 MulAdd(MF4 x, MF4x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	result = mad(x.w, y._m30_m31_m32_m33, result);
	return result;
}

#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 MF4
#define M4 MF4x4

#define L0(x, y) V4(O(T3, x, y))
#define L1(x, y) V4(O(T4, x, y))
#define L2(x, y) V4(O(T5, x, y))

void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 = MulAdd(s0_0_0, M4(2.387e-02, 5.039e-03, 1.100e-02, -1.362e-02, 9.302e-02, 8.205e-02, 2.296e-02, 7.425e-03, -2.191e-02, -1.911e-02, 2.297e-04, 9.503e-04, -2.780e-02, 2.108e-02, 1.064e-02, -1.065e-02), r0);
	r1 = MulAdd(s0_0_0, M4(2.802e-02, -9.735e-03, -7.902e-03, -3.066e-02, -1.309e-02, 6.763e-02, 2.354e-03, -1.702e-02, -5.457e-02, -1.194e-01, 2.090e-02, 2.264e-02, 3.222e-02, -3.080e-02, 1.552e-02, 1.208e-01), r1);
	r0 = MulAdd(s0_0_1, M4(1.401e-02, -4.661e-03, 6.371e-02, -1.231e-02, 1.398e-01, 5.913e-02, -1.489e-01, 2.703e-02, 2.063e-03, -4.034e-02, 5.600e-03, -1.538e-01, -2.203e-02, 2.497e-02, -1.312e-01, 6.019e-02), r0);
	r1 = MulAdd(s0_0_1, M4(5.172e-03, 6.714e-02, 7.182e-02, 1.414e-01, 9.651e-02, 5.924e-02, 5.372e-03, 3.350e-01, 4.913e-02, 1.126e-01, -8.533e-02, -5.515e-02, -4.498e-02, -4.091e-02, -1.401e-01, -9.632e-02), r1);
	r0 = MulAdd(s0_0_2, M4(4.700e-02, 3.259e-02, 5.663e-02, 3.233e-02, 3.070e-02, 2.611e-02, -1.845e-02, 1.003e-02, -3.212e-03, -8.722e-03, 2.501e-03, 3.606e-02, -3.405e-02, -1.799e-02, -6.237e-02, 9.660e-03), r0);
	r1 = MulAdd(s0_0_2, M4(5.018e-02, 8.628e-03, 1.489e-01, -8.424e-02, 1.169e-01, -4.234e-03, 5.637e-02, -7.539e-02, -9.058e-02, -1.327e-02, 8.276e-02, 1.966e-02, 3.427e-02, -1.187e-02, -1.087e-01, -8.417e-02), r1);
	r0 = MulAdd(s0_1_0, M4(-1.191e-01, 1.294e-01, 1.445e-02, 2.066e-02, -4.614e-02, -2.934e-02, -3.672e-02, -1.284e-02, 5.660e-01, 2.852e-01, 2.228e-01, 1.082e-01, 2.247e-02, -7.533e-03, -2.905e-02, -6.454e-04), r0);
	r1 = MulAdd(s0_1_0, M4(8.417e-02, -2.250e-01, -1.563e-02, -2.469e-02, 1.544e-01, 2.183e-01, -1.818e-03, -6.337e-03, -2.744e-01, 9.829e-01, 2.247e-02, 4.035e-02, 1.008e-01, 1.393e-01, 4.202e-03, 1.659e-02), r1);
	r0 = MulAdd(s0_1_1, M4(-6.695e-02, 1.528e-01, 5.858e-02, 6.154e-01, 5.879e-01, 6.793e-01, 8.536e-01, 4.064e-01, 3.909e-01, 4.033e-01, -7.441e-01, 6.816e-01, 2.666e-01, -2.377e-01, 1.375e-02, -9.337e-02), r0);
	r1 = MulAdd(s0_1_1, M4(-7.669e-02, 6.810e-02, -1.178e+00, 8.876e-02, 4.678e-01, 8.091e-02, 2.549e-01, 4.048e-01, 6.447e-01, -3.797e-01, 6.796e-01, -1.002e-01, -1.359e-01, 1.556e-01, 4.443e-01, 5.872e-02), r1);
	r0 = MulAdd(s0_1_2, M4(2.936e-02, 3.309e-02, -4.649e-02, 1.266e-03, -1.071e-02, 1.150e-02, -4.307e-02, 8.376e-02, -8.812e-02, 2.457e-03, 3.471e-01, 6.348e-02, -9.286e-03, -1.159e-02, -1.309e-01, -2.829e-02), r0);
	r1 = MulAdd(s0_1_2, M4(8.603e-02, -1.563e-02, -4.872e-02, -8.130e-02, 1.372e-01, 6.076e-04, 4.155e-02, 4.680e-02, -3.156e-01, 3.210e-02, -3.230e-01, 1.127e-01, -2.228e-02, 1.770e-02, 3.213e-01, -1.441e-01), r1);
	r0 = MulAdd(s0_2_0, M4(-1.035e-01, -1.453e-01, 2.119e-02, -4.831e-02, 2.838e-02, 3.192e-02, -2.990e-03, 1.083e-02, -4.665e-02, 2.126e-01, 2.998e-01, 5.725e-02, -2.358e-02, 2.070e-02, 9.487e-03, 2.215e-02), r0);
	r1 = MulAdd(s0_2_0, M4(2.265e-01, 5.212e-02, -2.732e-02, -2.056e-01, -1.269e-01, -9.936e-02, 8.049e-04, -2.832e-02, -3.935e-01, -6.899e-02, -8.451e-03, -8.612e-02, 4.968e-02, -7.789e-02, -1.894e-02, -9.563e-03), r1);
	r0 = MulAdd(s0_2_1, M4(-4.269e-02, -2.241e-01, -4.941e-01, -1.515e-01, 1.681e-02, 8.103e-02, 1.392e-02, -2.671e-02, -9.747e-02, -3.161e-02, -6.227e-03, 1.997e-01, -3.018e-01, 1.713e-01, 6.287e-02, 1.076e-01), r0);
	r1 = MulAdd(s0_2_1, M4(-4.755e-01, -1.019e-01, 5.387e-02, 1.452e-01, 1.255e-01, 6.241e-04, -9.066e-02, 4.872e-02, 3.606e-01, -4.531e-02, 3.632e-02, -2.959e-01, 1.296e-02, -2.184e-02, 4.305e-04, -2.642e-02), r1);
	r0 = MulAdd(s0_2_2, M4(-1.507e-02, 9.670e-03, -7.726e-02, -7.397e-02, 1.959e-02, 1.723e-02, -9.752e-03, -2.326e-02, -2.236e-02, -6.484e-02, -4.524e-02, -5.987e-02, 2.390e-02, 6.645e-02, 5.563e-02, 1.685e-02), r0);
	r1 = MulAdd(s0_2_2, M4(1.048e-01, 2.912e-02, -1.161e-01, 1.022e-01, 5.820e-02, -8.682e-04, 2.609e-02, -6.270e-03, -2.588e-01, -1.494e-02, -4.232e-02, -3.747e-02, -9.839e-02, -8.867e-03, 7.103e-02, 6.650e-02), r1);
	r0 = MulAdd(s1_0_0, M4(-1.487e-01, -3.279e-01, -2.672e-02, -8.456e-02, 7.692e-03, -1.460e-02, 3.830e-04, -1.309e-02, -1.023e-01, -2.793e-02, -3.870e-02, -1.387e-03, 2.262e-01, 6.213e-02, 8.477e-02, 5.583e-02), r0);
	r1 = MulAdd(s1_0_0, M4(1.209e-01, -5.293e-01, 1.742e-02, 1.232e-01, -2.523e-02, 3.848e-02, 1.010e-02, -4.849e-02, 3.161e-02, -4.788e-02, -3.296e-02, 6.662e-02, -1.255e-01, 2.300e-01, -3.164e-02, 1.294e-01), r1);
	r0 = MulAdd(s1_0_1, M4(-1.350e-01, 1.637e-01, -1.179e-01, -1.987e-01, 5.722e-02, 7.147e-03, 3.106e-02, 2.949e-02, -1.528e-01, -8.862e-02, -1.209e-01, -1.719e-02, -1.948e-01, -1.005e-01, 1.262e-03, -3.722e-02), r0);
	r1 = MulAdd(s1_0_1, M4(-2.300e-01, -1.910e-01, -1.522e-01, -1.348e+00, -4.016e-02, 2.514e-02, -8.788e-03, -2.277e-01, 5.975e-02, -7.251e-02, -2.105e-01, 2.540e-01, 1.489e-01, -2.735e-01, 2.353e-01, -3.681e-01), r1);
	r0 = MulAdd(s1_0_2, M4(-1.500e-01, -1.010e-01, -1.774e-01, -1.191e-01, -2.646e-02, -2.101e-02, 2.656e-03, -1.485e-02, -3.013e-02, 3.431e-02, 3.875e-02, -3.613e-02, -5.432e-02, -2.659e-02, -6.672e-02, -3.826e-02), r0);
	r1 = MulAdd(s1_0_2, M4(-2.183e-01, -2.350e-03, -2.978e-01, -1.457e-01, -7.195e-03, -1.510e-02, 5.454e-02, -2.988e-02, 1.451e-01, 3.372e-03, 2.713e-03, -1.074e-01, -1.362e-01, 2.364e-02, -2.819e-01, 1.518e-01), r1);
	r0 = MulAdd(s1_1_0, M4(1.042e-01, 2.220e-01, 5.613e-02, 1.645e-01, -1.062e-01, -3.348e-02, 5.082e-02, -1.945e-02, -1.909e-01, -1.220e-01, -1.552e-01, -7.162e-02, -1.783e-01, 6.354e-02, 4.846e-02, 2.436e-02), r0);
	r1 = MulAdd(s1_1_0, M4(-1.876e-01, 2.569e-01, -8.313e-02, -8.131e-02, -3.810e-02, -4.132e-01, -2.325e-02, 3.355e-02, 2.210e-01, -3.486e-01, 4.346e-03, 1.124e-01, -1.194e-01, -2.803e-01, 3.860e-02, -1.494e-03), r1);
	r0 = MulAdd(s1_1_1, M4(2.000e-01, -6.499e-01, 2.163e-01, -1.899e-01, -2.588e-01, -1.604e-01, -8.083e-02, -2.531e-01, 2.904e-01, 3.430e-01, 6.142e-02, -3.122e-01, -1.360e-01, -2.939e-01, -3.565e-01, -5.947e-02), r0);
	r1 = MulAdd(s1_1_1, M4(6.801e-02, 1.179e-01, -5.623e-02, -6.493e-02, -4.985e-01, -1.634e-02, -3.174e-01, -4.263e-01, -1.463e-01, 1.955e-01, -2.140e-01, 8.439e-01, 3.290e-02, 4.419e-02, -2.152e-01, -1.529e-01), r1);
	r0 = MulAdd(s1_1_2, M4(-1.757e-02, -2.921e-01, -1.383e-02, 8.974e-02, -1.238e-02, -1.996e-02, -7.740e-02, -2.862e-02, -1.169e-01, -1.899e-01, 2.023e-01, 2.529e-01, 3.576e-02, -1.853e-02, -5.013e-03, -9.529e-02), r0);
	r1 = MulAdd(s1_1_2, M4(-2.812e-01, 8.243e-03, 2.446e-01, -4.952e-02, -1.401e-01, -5.836e-03, -3.480e-02, -3.135e-02, 6.191e-01, -3.551e-02, 2.819e-02, -1.803e-01, -2.387e-01, 1.252e-02, 1.372e-01, -6.929e-02), r1);
	r0 = MulAdd(s1_2_0, M4(-6.778e-03, -8.322e-02, -6.105e-03, -2.485e-02, -1.710e-02, -8.667e-02, -9.260e-03, -2.666e-03, -1.631e-02, -1.091e-01, -1.499e-01, -1.142e-03, 1.879e-02, -8.178e-02, 2.972e-03, -4.369e-02), r0);
	r1 = MulAdd(s1_2_0, M4(3.702e-02, -1.485e-01, -5.488e-03, 5.798e-02, 1.759e-02, 2.316e-02, 2.227e-02, -3.748e-02, 1.924e-01, -2.009e-02, 1.210e-02, 6.553e-02, 8.576e-02, 5.872e-02, -1.460e-02, -3.207e-02), r1);
	r0 = MulAdd(s1_2_1, M4(-2.267e-01, 7.790e-02, -1.837e-02, -7.647e-02, 3.443e-03, -6.516e-02, -1.018e-01, -2.413e-02, -7.503e-02, -9.552e-02, -4.063e-02, -6.569e-02, 2.606e-02, 5.670e-02, 7.544e-02, -2.148e-02), r0);
	r1 = MulAdd(s1_2_1, M4(1.096e-02, -7.206e-02, -7.949e-02, 4.133e-02, -1.003e-01, -2.908e-02, 5.395e-03, -3.755e-02, 5.544e-03, 3.053e-02, -2.249e-02, 1.112e-01, -6.042e-02, 1.486e-02, 3.790e-02, 5.070e-02), r1);
	r0 = MulAdd(s1_2_2, M4(-5.846e-02, 9.742e-02, -7.688e-02, 1.446e-01, -2.631e-02, -2.632e-02, -8.949e-03, -1.008e-02, -5.947e-03, -3.663e-03, -3.306e-03, -3.730e-02, -1.279e-02, 1.553e-03, 3.512e-03, 3.078e-02), r0);
	r1 = MulAdd(s1_2_2, M4(-4.995e-02, -3.162e-02, -1.268e-01, -2.651e-02, -2.819e-02, 2.515e-03, -3.405e-02, 1.166e-02, 2.245e-01, 2.107e-02, 1.057e-01, 9.793e-03, -4.176e-02, -1.143e-03, 1.737e-03, -2.745e-02), r1);
	s0_0_0 = L2(-1.0, -1.0); s0_0_1 = L2(0.0, -1.0); s0_0_2 = L2(1.0, -1.0);
	s0_1_0 = L2(-1.0, 0.0); s0_1_1 = L2(0.0, 0.0); s0_1_2 = L2(1.0, 0.0);
	s0_2_0 = L2(-1.0, 1.0); s0_2_1 = L2(0.0, 1.0); s0_2_2 = L2(1.0, 1.0);
	r0 = MulAdd(s0_0_0, M4(-1.196e-01, -4.586e-02, -1.041e-02, -7.075e-02, -1.043e-01, -1.993e-01, 4.699e-03, 2.184e-02, -5.846e-02, -1.485e-02, 3.524e-02, 1.643e-02, 9.159e-02, 1.665e-03, -1.411e-01, 3.330e-02), r0);
	r1 = MulAdd(s0_0_0, M4(2.904e-01, -9.613e-02, -1.256e-03, -7.892e-02, -1.265e-02, 2.645e-03, -1.015e-01, -2.250e-01, -2.015e-02, -1.767e-01, -1.145e-01, 1.611e-01, -1.394e-01, 9.167e-02, -1.368e-02, -2.010e-01), r1);
	r0 = MulAdd(s0_0_1, M4(-7.302e-03, -1.195e-01, 1.192e-01, -2.582e-01, 2.065e-01, -4.437e-01, 1.013e-01, -1.743e-01, -7.795e-03, -7.220e-03, -4.291e-02, -9.929e-02, 1.154e-02, 9.751e-03, 4.229e-01, 2.901e-01), r0);
	r1 = MulAdd(s0_0_1, M4(-3.311e-01, 3.008e-02, -1.935e-02, -1.906e-01, -2.607e-01, 1.470e-01, 2.939e-01, -1.605e-01, -2.637e-02, 4.003e-03, -2.290e-01, -1.696e-01, 9.910e-02, -2.000e-02, 4.756e-01, 5.140e-01), r1);
	r0 = MulAdd(s0_0_2, M4(1.236e-02, 1.774e-02, 1.694e-01, 1.014e-01, -3.561e-02, -3.528e-02, -1.364e-02, 1.269e-01, -1.765e-02, -2.019e-02, -9.837e-03, -1.400e-02, -5.214e-03, -2.716e-02, -2.091e-01, -1.499e-01), r0);
	r1 = MulAdd(s0_0_2, M4(-2.367e-02, 2.824e-02, 2.510e-02, 2.237e-01, -1.304e-01, 5.437e-02, -4.635e-02, -5.073e-02, -5.724e-04, -4.104e-03, -1.058e-02, 4.223e-04, -1.335e-01, -4.954e-02, 8.899e-02, -3.740e-01), r1);
	r0 = MulAdd(s0_1_0, M4(-3.056e-01, -4.099e-01, -1.091e-01, -1.174e-01, -1.373e-01, -4.709e-02, -1.483e-02, -1.188e-02, -1.693e-02, 5.456e-02, 3.565e-02, 3.283e-02, 4.658e-01, 4.776e-01, -3.195e-02, 1.139e-01), r0);
	r1 = MulAdd(s0_1_0, M4(5.813e-01, -6.348e-01, 5.341e-02, 1.283e-01, -2.898e-01, -5.605e-01, -7.739e-02, 4.109e-02, -4.842e-01, -2.015e-01, 3.188e-02, 2.494e-01, -4.639e-01, 9.178e-01, -7.965e-02, -1.977e-01), r1);
	r0 = MulAdd(s0_1_1, M4(-4.475e-01, -2.325e-01, -2.114e-01, -3.678e-01, -4.110e-01, -5.558e-02, -4.194e-01, -1.646e-01, -1.812e-01, -1.165e-01, -2.180e-01, -4.219e-01, 6.516e-01, 4.901e-01, 7.598e-01, 2.872e-01), r0);
	r1 = MulAdd(s0_1_1, M4(-6.779e-01, -2.329e-01, -3.032e-01, -9.753e-01, 2.636e-02, 1.457e-02, -1.628e-01, -2.202e-01, 2.485e-01, -1.431e-01, -3.447e-01, -7.063e-01, 8.067e-01, 3.149e-01, 3.533e-01, 1.168e+00), r1);
	r0 = MulAdd(s0_1_2, M4(-8.960e-02, -1.548e-01, -2.743e-02, -1.452e-01, -3.411e-02, -7.984e-02, -1.720e-01, -1.372e-01, -2.922e-02, -4.869e-02, 6.113e-02, -6.427e-02, 1.180e-01, 1.630e-01, 1.424e-01, 2.843e-01), r0);
	r1 = MulAdd(s0_1_2, M4(-6.987e-01, 2.133e-03, -4.074e-02, 9.316e-02, -1.117e-01, -2.403e-02, 3.816e-02, -1.217e-02, -1.752e-01, -1.545e-03, -1.333e-01, -6.443e-02, 5.456e-01, 7.471e-03, -7.507e-03, -2.339e-01), r1);
	r0 = MulAdd(s0_2_0, M4(5.189e-02, -3.084e-02, 6.678e-02, -1.339e-02, 5.211e-02, -4.927e-02, -1.239e-02, -1.325e-02, -1.362e-02, -5.128e-02, 1.129e-02, 4.093e-02, -4.678e-02, 9.366e-02, -6.714e-02, 1.592e-02), r0);
	r1 = MulAdd(s0_2_0, M4(1.821e-01, 1.900e-01, -4.043e-02, -2.715e-02, 7.738e-02, 1.067e-01, -2.444e-02, 3.594e-02, -8.610e-02, -1.304e-01, 1.970e-02, 4.296e-03, -2.328e-01, -2.435e-01, 3.431e-02, 5.506e-02), r1);
	r0 = MulAdd(s0_2_1, M4(1.392e-01, -4.945e-02, 2.119e-01, -7.351e-02, 4.283e-02, 2.137e-02, 1.687e-01, -1.623e-02, 1.400e-02, -7.672e-03, -1.617e-01, -4.320e-02, -1.651e-01, 2.251e-02, -2.378e-01, 7.097e-02), r0);
	r1 = MulAdd(s0_2_1, M4(-2.090e-01, 3.536e-02, -3.582e-03, 2.963e-03, -6.411e-02, -9.594e-03, 1.891e-02, 3.416e-02, 1.578e-02, -2.630e-02, 8.782e-04, 2.474e-02, 2.531e-01, -2.681e-02, -2.825e-02, -3.559e-02), r1);
	r0 = MulAdd(s0_2_2, M4(6.498e-02, 6.811e-02, 1.636e-01, 5.577e-02, -1.441e-02, 7.929e-03, 3.934e-02, 3.743e-04, -2.435e-02, -6.520e-03, 1.730e-02, 8.862e-03, -6.469e-02, -7.798e-02, -2.087e-01, -6.567e-02), r0);
	r1 = MulAdd(s0_2_2, M4(-4.256e-02, 2.814e-02, -8.059e-02, 4.228e-02, 4.183e-02, 3.332e-03, -8.306e-02, -5.689e-02, -2.430e-02, -6.836e-03, -2.929e-02, 1.817e-02, 3.010e-02, -3.360e-02, 1.072e-01, -2.368e-02), r1);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}

[numthreads(64, 1, 1)]
void __M(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) {
	Pass3((gid.xy << 3), tid);
}
