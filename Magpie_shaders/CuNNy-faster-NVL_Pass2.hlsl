cbuffer __CB1 : register(b0) {
	uint2 __inputSize;
	uint2 __outputSize;
	float2 __inputPt;
	float2 __outputPt;
	float2 __scale;
};


Texture2D<MF4> T0 : register(t0);
Texture2D<MF4> T1 : register(t1);
RWTexture2D<unorm MF4> T2 : register(u0);
RWTexture2D<unorm MF4> T3 : register(u1);
SamplerState SP : register(s0);
SamplerState SL : register(s1);

uint __Bfe(uint src, uint off, uint bits) { uint mask = (1u << bits) - 1; return (src >> off) & mask; }
uint __BfiM(uint src, uint ins, uint bits) { uint mask = (1u << bits) - 1; return (ins & mask) | (src & (~mask)); }
uint2 Rmp8x8(uint a) { return uint2(__Bfe(a, 1u, 3u), __BfiM(__Bfe(a, 3u, 3u), a, 1u)); }
uint2 GetInputSize() { return __inputSize; }
float2 GetInputPt() { return __inputPt; }
uint2 GetOutputSize() { return __outputSize; }
float2 GetOutputPt() { return __outputPt; }
float2 GetScale() { return __scale; }
MF2 MulAdd(MF2 x, MF2x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	return result;
}
MF3 MulAdd(MF2 x, MF2x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	return result;
}
MF4 MulAdd(MF2 x, MF2x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	return result;
}
MF2 MulAdd(MF3 x, MF3x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	return result;
}
MF3 MulAdd(MF3 x, MF3x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	return result;
}
MF4 MulAdd(MF3 x, MF3x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	return result;
}
MF2 MulAdd(MF4 x, MF4x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	result = mad(x.w, y._m30_m31, result);
	return result;
}
MF3 MulAdd(MF4 x, MF4x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	result = mad(x.w, y._m30_m31_m32, result);
	return result;
}
MF4 MulAdd(MF4 x, MF4x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	result = mad(x.w, y._m30_m31_m32_m33, result);
	return result;
}

#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 MF4
#define M4 MF4x4

#define L0(x, y) V4(O(T0, x, y))
#define L1(x, y) V4(O(T1, x, y))

void Pass2(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 = MulAdd(s0_0_0, M4(-2.745e-02, -2.207e-01, 1.935e-01, -1.900e-01, 2.286e-01, 2.744e-01, -8.664e-02, 1.118e-01, -4.883e-02, 9.057e-02, -4.562e-02, 1.048e-01, -9.133e-01, 6.688e-02, -6.078e-02, 3.743e-01), r0);
	r1 = MulAdd(s0_0_0, M4(-1.947e-01, -2.976e-02, -1.775e-02, -1.307e-01, 5.090e-01, 3.405e-01, 4.068e-02, 8.503e-02, 8.089e-02, 1.247e-02, 5.559e-02, 4.655e-02, 3.293e-01, 2.122e-01, 5.199e-01, 1.024e-03), r1);
	r0 = MulAdd(s0_0_1, M4(-3.874e-02, -2.083e-01, 7.888e-02, 1.068e-01, 6.695e-01, -3.078e-02, 2.589e-01, -4.537e-01, -3.048e-02, 2.744e-01, -8.475e-02, 3.597e-01, -5.918e-01, 2.407e-01, -3.240e-01, -2.955e-01), r0);
	r1 = MulAdd(s0_0_1, M4(-8.418e-02, 1.246e-03, -1.387e-01, -9.880e-02, 5.665e-01, 4.463e-01, -4.628e-02, -3.749e-01, 3.047e-01, 3.018e-01, 4.826e-01, -4.538e-02, 3.256e-01, 1.067e-01, -8.467e-02, 1.222e-01), r1);
	r0 = MulAdd(s0_0_2, M4(-6.977e-02, -1.212e-02, -1.844e-01, 7.854e-02, 7.446e-02, -2.596e-02, 1.750e-01, -1.119e-01, 1.223e-01, 2.946e-02, 2.369e-01, -1.947e-02, 6.332e-02, -3.517e-02, -3.114e-01, 4.048e-02), r0);
	r1 = MulAdd(s0_0_2, M4(-1.367e-01, -4.050e-02, 6.962e-02, 2.745e-01, 1.526e-02, 3.480e-02, -8.861e-02, -4.383e-01, 4.392e-02, 9.908e-02, 2.106e-01, -2.098e-01, 6.691e-02, -4.208e-02, -1.477e-01, 2.624e-01), r1);
	r0 = MulAdd(s0_1_0, M4(1.160e+00, -3.447e-01, 1.431e-01, -6.233e-01, -3.682e-01, 5.971e-02, 1.294e-01, -7.259e-02, -5.681e-01, 1.449e-01, 2.995e-02, 2.269e-01, 6.139e-01, -1.479e-01, -1.879e-01, 9.096e-01), r0);
	r1 = MulAdd(s0_1_0, M4(-3.301e-01, -8.343e-02, -4.568e-02, 7.738e-02, 6.387e-01, 5.020e-01, -7.634e-02, 2.607e-01, 3.192e-02, 3.449e-02, 1.919e-01, -6.372e-02, -2.151e-01, 4.512e-01, 6.904e-02, -2.574e-01), r1);
	r0 = MulAdd(s0_1_1, M4(-4.517e-01, -1.243e-01, -2.165e-01, -6.066e-01, 4.020e-01, 2.854e-03, 6.640e-02, 3.243e-03, -5.373e-01, 3.836e-01, 8.138e-02, 4.463e-01, 4.095e-01, 7.528e-01, 1.965e-01, 3.183e-01), r0);
	r1 = MulAdd(s0_1_1, M4(-6.218e-01, -4.830e-01, -9.349e-02, 5.566e-01, -2.872e-01, 3.838e-01, -1.341e-01, 5.983e-01, 9.584e-01, 6.938e-01, -2.568e-01, -3.701e-01, 5.510e-02, -7.565e-01, -1.861e-01, -4.291e-01), r1);
	r0 = MulAdd(s0_1_2, M4(6.486e-02, 1.377e-01, -3.370e-02, -2.791e-02, -1.140e-02, -9.545e-02, 2.359e-01, 3.221e-02, 5.838e-02, 7.187e-02, 8.145e-01, -4.951e-01, -8.723e-02, -4.000e-01, 4.580e-01, -5.536e-01), r0);
	r1 = MulAdd(s0_1_2, M4(1.394e-01, 8.523e-02, 1.672e-01, 1.163e-01, -1.975e-02, 1.853e-01, 3.929e-02, 5.932e-01, 7.156e-02, 2.065e-01, 1.014e-01, -8.406e-01, -2.946e-01, 1.205e-02, -1.384e-01, -9.426e-02), r1);
	r0 = MulAdd(s0_2_0, M4(1.578e-01, 3.479e-01, -4.638e-02, -1.476e-02, -2.450e-02, -2.310e-01, 3.853e-02, -3.572e-02, -2.824e-01, -1.821e-01, 2.635e-02, 1.115e-02, 4.829e-01, -1.333e-02, 1.353e-01, -1.404e-01), r0);
	r1 = MulAdd(s0_2_0, M4(4.062e-01, -7.839e-02, -1.528e-01, 1.463e-01, -2.094e-01, 5.457e-02, 4.655e-02, 3.771e-02, -8.435e-03, -2.585e-03, 2.200e-01, -2.484e-02, 2.209e-02, 5.240e-01, -6.499e-02, 3.130e-01), r1);
	r0 = MulAdd(s0_2_1, M4(-1.333e-01, 2.201e-01, -1.312e-01, 2.972e-01, -7.875e-02, 1.708e-02, 1.902e-02, 5.143e-02, -1.431e-01, -5.507e-01, -9.084e-02, -3.752e-02, 1.752e-01, -3.599e-01, 8.160e-02, -1.351e-01), r0);
	r1 = MulAdd(s0_2_1, M4(6.348e-01, 2.734e-02, 1.104e-02, -4.207e-01, -7.792e-02, -1.760e-02, 1.204e-01, 2.692e-01, -5.941e-01, 1.669e-01, 6.509e-02, 3.877e-01, -4.454e-01, -2.498e-01, -8.765e-02, 3.905e-01), r1);
	r0 = MulAdd(s0_2_2, M4(4.501e-02, 7.349e-02, -2.666e-01, 9.839e-02, 1.803e-02, 1.300e-02, -6.910e-02, 2.326e-02, 3.095e-02, -1.059e-01, 6.958e-02, -1.489e-01, -3.644e-02, 8.288e-02, 1.284e-01, 7.309e-02), r0);
	r1 = MulAdd(s0_2_2, M4(1.741e-01, -4.271e-02, 6.756e-03, -3.452e-01, -8.228e-02, -1.461e-02, 5.054e-03, 3.622e-01, -1.589e-01, 1.089e-01, 8.572e-02, 1.207e+00, 2.484e-02, -9.725e-02, 5.219e-02, -4.567e-01), r1);
	r0 = MulAdd(s1_0_0, M4(-1.583e-02, -3.945e-02, -4.681e-02, 3.724e-02, -5.691e-01, 2.831e-01, 1.781e-01, 3.673e-01, 1.344e-01, -2.381e-01, -3.967e-02, -5.579e-02, 1.124e-02, 4.429e-02, 1.785e-02, -7.294e-03), r0);
	r1 = MulAdd(s1_0_0, M4(-1.249e-02, -1.271e-02, -5.509e-02, -1.618e-01, 5.631e-02, 1.353e-01, 5.989e-01, -3.549e-01, -3.291e-02, 1.055e-02, -3.570e-01, 2.014e-03, 2.559e-02, 2.520e-02, 1.014e-01, 4.776e-02), r1);
	r0 = MulAdd(s1_0_1, M4(-6.841e-02, -3.330e-01, 1.491e-01, -2.479e-01, 8.614e-01, 2.899e-01, -1.464e-01, -4.568e-01, -1.016e-01, 1.217e-02, 8.128e-02, -1.909e-01, 8.666e-02, 1.567e-01, -4.480e-02, 9.731e-02), r0);
	r1 = MulAdd(s1_0_1, M4(-3.779e-01, -1.597e-01, -1.078e-01, -2.329e-01, -2.164e-01, -5.395e-02, 4.674e-02, -7.412e-01, -5.047e-02, 6.253e-03, 3.330e-03, 1.284e-01, 9.175e-02, 2.142e-02, 5.378e-03, 7.153e-02), r1);
	r0 = MulAdd(s1_0_2, M4(4.816e-02, -4.240e-02, 7.788e-02, -2.622e-02, -2.669e-02, 1.150e-01, 5.443e-01, 6.535e-01, 1.021e-01, -6.372e-02, -1.450e-01, -1.939e-01, -2.537e-02, 1.151e-01, -4.627e-02, 5.969e-02), r0);
	r1 = MulAdd(s1_0_2, M4(-3.323e-02, -1.189e-02, -4.776e-02, -1.254e-01, 1.630e-02, -4.824e-03, 3.465e-01, -1.163e-01, -4.700e-02, -7.449e-03, -1.178e-01, 2.407e-01, 1.349e-01, 5.684e-02, 8.430e-02, -4.766e-03), r1);
	r0 = MulAdd(s1_1_0, M4(3.267e-01, 1.082e-01, 6.145e-02, -2.367e-01, -6.572e-01, -2.386e-01, 1.232e-01, -2.354e-01, 2.557e-01, 5.896e-02, -6.426e-02, -2.649e-01, -8.893e-02, -5.766e-02, -2.966e-03, 5.249e-02), r0);
	r1 = MulAdd(s1_1_0, M4(-8.711e-02, 1.077e-04, -1.323e-01, -2.155e-02, 3.191e-01, -1.654e-01, 3.363e-01, 3.341e-01, -5.586e-02, 6.453e-02, -7.851e-02, 1.353e-01, 1.495e-02, 2.910e-02, 3.749e-02, -4.560e-03), r1);
	r0 = MulAdd(s1_1_1, M4(-1.276e-01, 5.603e-02, 4.266e-02, -2.442e-01, -1.999e-01, -6.974e-01, -4.758e-01, -8.425e-01, -6.083e-01, 1.831e-01, -1.002e-01, 2.716e-03, -7.994e-01, 4.148e-01, -2.609e-02, 3.311e-01), r0);
	r1 = MulAdd(s1_1_1, M4(-1.617e-01, -4.843e-01, -4.719e-02, 4.770e-02, 1.218e-01, 8.793e-02, -9.632e-01, 2.590e-01, 8.878e-04, -3.296e-02, 3.320e-01, 2.555e-01, 2.194e-01, 3.115e-01, 8.496e-01, -1.949e-01), r1);
	r0 = MulAdd(s1_1_2, M4(1.427e-02, -1.316e-01, 9.460e-02, -1.718e-01, -1.585e-01, -2.074e-01, 9.441e-04, -3.306e-01, -1.671e-01, 3.161e-02, -1.101e-01, 1.125e-01, -2.796e-01, 3.944e-01, -3.721e-01, 3.283e-01), r0);
	r1 = MulAdd(s1_1_2, M4(-1.260e-01, -8.491e-02, -7.202e-02, 1.288e-01, -1.071e-01, -4.142e-02, -1.240e-01, 5.697e-01, -2.579e-02, -7.446e-03, 9.417e-02, -3.176e-01, 4.365e-01, 1.960e-01, 1.096e-01, -2.448e-01), r1);
	r0 = MulAdd(s1_2_0, M4(2.348e-01, -1.035e-01, 1.214e-03, -9.820e-02, -2.979e-01, -1.009e-01, 1.762e-03, 2.216e-02, 2.369e-01, 2.364e-01, -4.041e-02, 1.902e-01, -1.076e-01, -3.857e-02, 1.176e-02, 1.821e-03), r0);
	r1 = MulAdd(s1_2_0, M4(1.106e-01, 6.168e-03, -8.660e-02, -9.408e-02, -4.449e-02, -1.545e-01, 1.303e-01, -4.042e-02, 2.602e-02, 6.939e-02, -2.552e-01, -7.157e-02, -4.227e-02, 4.203e-02, 1.665e-01, -6.815e-03), r1);
	r0 = MulAdd(s1_2_1, M4(1.327e-01, -1.606e-01, 6.922e-02, -1.945e-01, 1.564e-01, 4.677e-02, -8.247e-02, -1.052e-01, 1.166e-01, 2.031e-01, 2.183e-01, 3.076e-01, -1.039e+00, -7.060e-02, -1.160e-01, 4.229e-01), r0);
	r1 = MulAdd(s1_2_1, M4(9.163e-02, 6.150e-02, -1.353e-01, -4.893e-01, 1.450e-01, 2.789e-01, -3.849e-02, 2.974e-01, 1.348e-01, 9.801e-02, 7.791e-02, -3.330e-01, -6.113e-01, -3.717e-02, 2.095e-01, -2.653e-02), r1);
	r0 = MulAdd(s1_2_2, M4(-9.045e-02, 9.807e-03, 7.241e-02, 1.403e-03, 1.353e-01, 1.390e-01, -1.117e-01, 9.984e-02, 2.738e-01, 2.320e-01, 4.406e-02, 9.207e-03, 1.703e-01, -7.247e-02, 1.095e-01, 1.438e-01), r0);
	r1 = MulAdd(s1_2_2, M4(-4.790e-03, -2.152e-02, -2.678e-02, -1.558e-01, 2.494e-02, -4.282e-02, -2.160e-02, 3.721e-02, 9.600e-02, 3.137e-02, -2.145e-03, 6.140e-02, 2.852e-01, 3.834e-01, 2.035e-01, 1.803e-02), r1);
	r0 = max(r0, 0.0);
	T2[gxy] = r0;
	r1 = max(r1, 0.0);
	T3[gxy] = r1;
}

[numthreads(64, 1, 1)]
void __M(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) {
	Pass2((gid.xy << 3), tid);
}
