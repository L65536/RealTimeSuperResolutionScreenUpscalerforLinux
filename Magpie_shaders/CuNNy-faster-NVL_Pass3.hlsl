cbuffer __CB1 : register(b0) {
	uint2 __inputSize;
	uint2 __outputSize;
	float2 __inputPt;
	float2 __outputPt;
	float2 __scale;
};


Texture2D<MF4> T2 : register(t0);
Texture2D<MF4> T3 : register(t1);
RWTexture2D<unorm MF4> T0 : register(u0);
RWTexture2D<unorm MF4> T1 : register(u1);
SamplerState SP : register(s0);
SamplerState SL : register(s1);

uint __Bfe(uint src, uint off, uint bits) { uint mask = (1u << bits) - 1; return (src >> off) & mask; }
uint __BfiM(uint src, uint ins, uint bits) { uint mask = (1u << bits) - 1; return (ins & mask) | (src & (~mask)); }
uint2 Rmp8x8(uint a) { return uint2(__Bfe(a, 1u, 3u), __BfiM(__Bfe(a, 3u, 3u), a, 1u)); }
uint2 GetInputSize() { return __inputSize; }
float2 GetInputPt() { return __inputPt; }
uint2 GetOutputSize() { return __outputSize; }
float2 GetOutputPt() { return __outputPt; }
float2 GetScale() { return __scale; }
MF2 MulAdd(MF2 x, MF2x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	return result;
}
MF3 MulAdd(MF2 x, MF2x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	return result;
}
MF4 MulAdd(MF2 x, MF2x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	return result;
}
MF2 MulAdd(MF3 x, MF3x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	return result;
}
MF3 MulAdd(MF3 x, MF3x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	return result;
}
MF4 MulAdd(MF3 x, MF3x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	return result;
}
MF2 MulAdd(MF4 x, MF4x2 y, MF2 a) {
	MF2 result = a;
	result = mad(x.x, y._m00_m01, result);
	result = mad(x.y, y._m10_m11, result);
	result = mad(x.z, y._m20_m21, result);
	result = mad(x.w, y._m30_m31, result);
	return result;
}
MF3 MulAdd(MF4 x, MF4x3 y, MF3 a) {
	MF3 result = a;
	result = mad(x.x, y._m00_m01_m02, result);
	result = mad(x.y, y._m10_m11_m12, result);
	result = mad(x.z, y._m20_m21_m22, result);
	result = mad(x.w, y._m30_m31_m32, result);
	return result;
}
MF4 MulAdd(MF4 x, MF4x4 y, MF4 a) {
	MF4 result = a;
	result = mad(x.x, y._m00_m01_m02_m03, result);
	result = mad(x.y, y._m10_m11_m12_m13, result);
	result = mad(x.z, y._m20_m21_m22_m23, result);
	result = mad(x.w, y._m30_m31_m32_m33, result);
	return result;
}

#define O(t, x, y) t.SampleLevel(SP, pos + float2(x, y) * pt, 0)
#define V4 MF4
#define M4 MF4x4

#define L0(x, y) V4(O(T2, x, y))
#define L1(x, y) V4(O(T3, x, y))

void Pass3(uint2 blockStart, uint3 tid) {
	float2 pt = float2(GetInputPt());
	uint2 gxy = Rmp8x8(tid.x) + blockStart;
	uint2 sz = GetInputSize();
	if (gxy.x >= sz.x || gxy.y >= sz.y)
		return;
	float2 pos = (gxy + 0.5) * pt;
	V4 s0_0_0, s0_0_1, s0_0_2, s0_1_0, s0_1_1, s0_1_2, s0_2_0, s0_2_1, s0_2_2, s1_0_0, s1_0_1, s1_0_2, s1_1_0, s1_1_1, s1_1_2, s1_2_0, s1_2_1, s1_2_2;
	V4 r0 = 0.0, r1 = 0.0;
	s0_0_0 = L0(-1.0, -1.0); s0_0_1 = L0(0.0, -1.0); s0_0_2 = L0(1.0, -1.0);
	s0_1_0 = L0(-1.0, 0.0); s0_1_1 = L0(0.0, 0.0); s0_1_2 = L0(1.0, 0.0);
	s0_2_0 = L0(-1.0, 1.0); s0_2_1 = L0(0.0, 1.0); s0_2_2 = L0(1.0, 1.0);
	s1_0_0 = L1(-1.0, -1.0); s1_0_1 = L1(0.0, -1.0); s1_0_2 = L1(1.0, -1.0);
	s1_1_0 = L1(-1.0, 0.0); s1_1_1 = L1(0.0, 0.0); s1_1_2 = L1(1.0, 0.0);
	s1_2_0 = L1(-1.0, 1.0); s1_2_1 = L1(0.0, 1.0); s1_2_2 = L1(1.0, 1.0);
	r0 = MulAdd(s0_0_0, M4(3.721e-01, -2.400e-02, -1.956e-01, -2.366e-02, -9.801e-01, 3.329e-01, 2.192e-01, 1.466e-02, 5.032e-01, 4.557e-01, 1.382e-01, 6.692e-03, -6.218e-01, 3.035e-03, -9.975e-02, 2.041e-02), r0);
	r1 = MulAdd(s0_0_0, M4(-1.125e-01, -1.964e-02, -3.158e-02, -7.642e-02, 1.214e-02, 2.403e-02, 2.518e-03, 5.992e-02, -3.808e-02, -7.547e-02, 2.046e-02, 9.350e-02, -1.091e-02, -4.339e-02, -1.240e-03, 3.815e-02), r1);
	r0 = MulAdd(s0_0_1, M4(-1.061e+00, -1.985e-01, -9.808e-01, -2.885e-02, -3.455e+00, -5.276e-02, 1.655e-01, -1.392e-01, -5.314e-01, 3.927e-03, 1.428e-02, -1.066e-01, 1.385e+00, 1.430e-02, 5.197e-02, 1.058e-02), r0);
	r1 = MulAdd(s0_0_1, M4(2.568e-01, 5.616e-02, -2.189e-02, -6.037e-02, 1.284e-01, -1.030e-01, -3.021e-02, -2.181e-01, -1.265e-01, -3.797e-01, 3.796e-02, 4.211e-02, -2.102e-01, -3.914e-02, 1.532e-02, 7.398e-02), r1);
	r0 = MulAdd(s0_0_2, M4(-4.630e+00, 5.360e-02, -9.901e-02, 6.749e-02, -3.970e+00, -7.701e-03, 7.287e-03, -2.363e-03, -5.005e+00, 1.976e-02, -2.377e-03, 3.549e-03, -5.780e+00, -1.170e-01, -8.632e-03, 8.844e-03), r0);
	r1 = MulAdd(s0_0_2, M4(-1.027e+00, -4.827e-02, 1.986e-03, -2.380e-01, 2.717e-01, 9.447e-02, -3.643e-01, -7.834e-02, -3.782e-02, -1.204e-01, -5.315e-02, 2.084e-02, 8.963e-03, 3.009e-02, 1.096e-01, 2.298e-02), r1);
	r0 = MulAdd(s0_1_0, M4(3.437e-01, 7.051e-02, -1.714e-01, 7.105e-02, 8.972e-02, 3.610e-01, -1.654e-01, -1.354e-01, 1.456e-01, -4.150e-01, 6.514e-01, -4.283e-02, -1.893e-01, -5.605e-01, 2.214e-01, -3.887e-03), r0);
	r1 = MulAdd(s0_1_0, M4(-2.589e-01, 3.982e-02, -2.441e-02, -1.366e-01, 5.284e-02, -6.163e-02, -2.746e-02, -1.043e-01, -6.777e-01, 3.831e-02, -4.013e-02, -3.283e-01, -2.101e-01, 5.011e-02, 5.132e-03, -8.595e-02), r1);
	r0 = MulAdd(s0_1_1, M4(2.334e-02, -2.941e+01, -1.112e+00, -4.133e-01, 2.986e-01, 2.569e-02, 1.114e-01, 4.450e-01, 8.375e-01, 9.858e-02, -2.843e-02, -1.439e-01, -2.625e-01, 7.243e-01, -7.802e-02, -2.181e-01), r0);
	r1 = MulAdd(s0_1_1, M4(8.222e-01, 1.408e-01, 1.489e-01, 4.876e-01, -2.979e-01, -2.124e-01, -1.848e-01, 1.382e-01, 9.510e-01, 2.895e-01, -2.940e-01, -3.275e-03, 5.967e-01, 2.665e-01, 1.332e-01, 5.154e-02), r1);
	r0 = MulAdd(s0_1_2, M4(-2.033e-02, -4.102e-02, -2.331e-01, -7.625e-03, 1.539e-01, 1.332e-01, 6.752e-03, -2.610e-02, -2.315e-01, -3.520e-02, -2.606e-02, 3.162e-02, 3.172e-01, -2.522e-01, -3.822e-02, 1.669e-02), r0);
	r1 = MulAdd(s0_1_2, M4(-1.607e+00, -4.652e-01, -9.161e-01, -9.656e-01, -8.619e-02, 4.011e-02, 5.215e-01, 2.646e-01, -2.163e-01, -3.428e-01, -2.179e-01, -7.829e-02, -3.517e-01, -1.967e-01, -4.287e-01, -1.498e-01), r1);
	r0 = MulAdd(s0_2_0, M4(-1.786e-01, 9.090e-02, -2.610e-03, -5.163e-02, 6.480e-02, -3.163e-02, 1.155e-01, -8.818e-03, 2.394e-01, -5.334e-02, 2.987e-01, 5.863e-02, 3.900e-02, 4.309e-02, -2.314e-01, -6.592e-02), r0);
	r1 = MulAdd(s0_2_0, M4(-2.722e-02, 1.052e-01, 8.269e-03, -5.500e-02, -3.936e-03, 5.446e-03, -1.516e-02, 5.667e-03, -1.344e-02, 5.689e-02, 5.689e-03, -1.548e-01, 1.431e-02, -5.652e-02, -2.087e-02, -4.520e-02), r1);
	r0 = MulAdd(s0_2_1, M4(-1.032e-01, -1.703e-01, 6.614e-02, -4.873e-01, -2.534e-01, 9.399e-02, 2.212e-01, -3.525e-01, -1.027e-01, 1.957e-01, -1.243e-01, 4.235e-02, -9.614e-04, 1.865e-01, -6.629e-02, -1.868e-01), r0);
	r1 = MulAdd(s0_2_1, M4(1.028e-01, -1.106e-01, -7.235e-02, 4.743e-02, 7.260e-02, 1.035e-01, 3.983e-02, -3.822e-02, 2.064e-01, 5.926e-02, 2.607e-01, 4.834e-01, -2.974e-01, -3.156e-01, -1.608e-01, -1.681e-01), r1);
	r0 = MulAdd(s0_2_2, M4(-1.451e-01, -3.157e-02, 9.779e-02, -1.622e-02, -2.159e-01, -4.299e-02, -1.642e-02, -2.655e-02, -1.737e-01, -5.800e-02, -7.301e-02, 1.616e-02, -4.006e-01, -1.319e-01, -8.343e-02, 3.723e-02), r0);
	r1 = MulAdd(s0_2_2, M4(3.804e-02, 3.039e-01, -4.726e-02, -3.090e-01, 1.665e-01, 1.750e-01, -4.054e-02, 5.676e-02, -1.217e-01, -7.191e-02, 1.771e-02, -1.154e-01, -2.791e-02, -1.646e-01, -1.121e-01, -3.843e-02), r1);
	r0 = MulAdd(s1_0_0, M4(-7.360e-02, -9.049e-02, -8.863e-02, 3.107e-03, 3.522e-03, 1.528e-01, 1.353e-01, -1.450e-02, 2.771e-02, -2.253e-01, -1.361e-01, -6.045e-03, -2.504e-02, 5.064e-02, -1.548e-01, 2.374e-02), r0);
	r1 = MulAdd(s1_0_0, M4(-3.736e-02, -1.712e-03, 1.067e-02, -4.615e-03, 8.765e-02, -2.028e-02, -2.360e-02, -3.386e-02, -4.990e-02, -1.162e-02, 5.282e-03, -2.086e-02, 9.336e-02, 1.060e-02, -1.951e-02, -6.118e-02), r1);
	r0 = MulAdd(s1_0_1, M4(-8.324e-02, 2.494e-02, -2.002e-01, 4.015e-02, 2.385e-01, -6.613e-02, 2.512e-01, -6.451e-02, 1.712e-01, -9.852e-02, -2.800e-01, 7.153e-02, -9.909e-01, -3.173e-02, 1.414e-02, -8.374e-02), r0);
	r1 = MulAdd(s1_0_1, M4(-4.612e-02, 2.401e-02, 6.899e-02, 2.905e-01, 6.444e-02, 3.205e-02, -1.362e-01, -4.326e-01, -9.494e-02, -6.820e-03, 6.421e-02, 1.714e-01, -5.901e-01, -9.780e-02, 9.027e-03, 1.887e-02), r1);
	r0 = MulAdd(s1_0_2, M4(-6.049e+00, 7.153e-02, -5.054e-03, 2.387e-02, -8.097e+00, -8.952e-02, -6.126e-03, -4.407e-02, -1.088e+01, 2.262e-02, -1.584e-02, -4.606e-03, -7.515e+00, 8.446e-02, 1.333e-02, -1.092e-02), r0);
	r1 = MulAdd(s1_0_2, M4(-4.014e-01, -2.529e-01, 2.178e-01, 8.960e-02, 4.076e-01, 2.650e-01, -2.803e-01, -8.337e-02, -4.150e-01, -1.169e-01, 2.159e-01, 2.209e-02, 7.263e-02, -5.167e-02, -4.701e-02, 7.609e-03), r1);
	r0 = MulAdd(s1_1_0, M4(4.563e-02, -4.523e-01, -1.023e-01, 2.913e-02, -4.190e-02, 9.824e-01, 3.403e-01, -2.963e-03, 5.346e-02, -5.637e-01, -1.136e-01, -9.705e-03, -1.695e-01, -1.431e-01, -3.994e-01, -2.549e-01), r0);
	r1 = MulAdd(s1_1_0, M4(5.094e-02, 5.899e-02, 7.176e-03, 7.392e-02, -7.962e-02, -1.056e-01, 1.996e-02, 4.597e-02, -5.665e-02, 9.646e-02, -6.105e-03, -2.696e-02, -6.616e-02, -2.239e-02, 1.726e-02, 5.942e-02), r1);
	r0 = MulAdd(s1_1_1, M4(-3.702e-01, -4.155e-01, -1.366e-01, -5.453e-01, -6.551e-01, -4.287e-01, 2.979e-02, 7.101e-01, -4.266e-02, -3.441e-01, -1.953e-01, -3.330e-01, -4.962e-01, -4.581e-02, -7.599e-02, -1.879e-01), r0);
	r1 = MulAdd(s1_1_1, M4(-1.928e-01, -4.612e-02, -6.519e-02, -3.969e-01, 6.230e-01, -8.522e-02, 9.952e-02, 8.184e-01, -2.250e-01, 8.927e-02, -3.654e-03, -2.698e-01, -2.588e-01, -3.297e-01, -4.873e-01, -7.559e-01), r1);
	r0 = MulAdd(s1_1_2, M4(-3.205e-01, 2.685e-01, -1.573e-02, 1.145e-01, 7.271e-01, -2.939e-01, -3.419e-02, -2.347e-02, -5.742e-01, 3.567e-01, 1.567e-01, -5.314e-02, -5.630e-02, 4.847e-02, 4.357e-02, -7.304e-03), r0);
	r1 = MulAdd(s1_1_2, M4(8.431e-02, -7.407e-01, -5.968e-01, -2.895e-01, 3.057e-01, 1.355e+00, 1.218e+00, 3.684e-01, 4.405e-01, -1.468e-01, -4.819e-01, -2.115e-01, -8.326e-02, -2.803e-01, -2.881e-01, -8.513e-03), r1);
	r0 = MulAdd(s1_2_0, M4(4.779e-02, -1.131e-01, -4.024e-02, 4.553e-02, -1.352e-02, 1.175e-01, -2.165e-01, -5.019e-02, -6.223e-02, -2.675e-01, 2.218e-02, 2.798e-02, -1.053e-01, 3.073e-03, -1.362e-01, -2.476e-02), r0);
	r1 = MulAdd(s1_2_0, M4(5.614e-02, 4.595e-02, 1.443e-02, 1.143e-02, 8.510e-02, -1.797e-02, -1.004e-02, 3.894e-02, -2.742e-03, 4.209e-02, 1.094e-02, -2.318e-02, 4.537e-03, 1.701e-02, -9.907e-03, 3.756e-03), r1);
	r0 = MulAdd(s1_2_1, M4(3.562e-02, -1.879e-01, -1.339e-01, 4.551e-01, 4.446e-02, -7.805e-02, 9.978e-02, 1.169e-01, 2.374e-01, -1.717e-01, 5.298e-01, 7.449e-02, 2.152e-02, -8.717e-03, -6.392e-02, -2.474e-03), r0);
	r1 = MulAdd(s1_2_1, M4(-1.522e-01, -1.399e-02, 6.566e-03, 3.406e-02, -1.909e-01, -1.610e-01, -7.153e-02, -1.621e-01, 9.282e-05, 7.914e-02, 1.993e-02, -7.462e-02, -1.242e-01, -1.460e-01, -5.944e-02, -4.934e-02), r1);
	r0 = MulAdd(s1_2_2, M4(1.692e-01, 1.819e-01, 8.325e-02, 3.697e-02, -7.658e-03, -5.463e-03, -2.540e-02, -5.200e-03, 7.926e-02, 1.222e-01, 2.049e-01, -3.164e-02, 4.969e-02, -3.982e-03, -1.223e-02, 2.194e-04), r0);
	r1 = MulAdd(s1_2_2, M4(-1.815e-01, -1.559e-01, 1.636e-01, 9.129e-02, 5.644e-02, 7.938e-02, 4.851e-02, 1.213e-01, 2.705e-01, 3.824e-01, 2.329e-01, 2.939e-01, -3.185e-02, -5.969e-02, -3.864e-02, -3.748e-02), r1);
	r0 = max(r0, 0.0);
	T0[gxy] = r0;
	r1 = max(r1, 0.0);
	T1[gxy] = r1;
}

[numthreads(64, 1, 1)]
void __M(uint3 tid : SV_GroupThreadID, uint3 gid : SV_GroupID) {
	Pass3((gid.xy << 3), tid);
}
